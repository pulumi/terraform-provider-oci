// Copyright (c) 2016, 2018, 2022, Oracle and/or its affiliates.  All rights reserved.
// This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
// Code generated. DO NOT EDIT.

// Application Dependency Management API
//
// Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see ADM (https://docs.cloud.oracle.com/Content/application-dependency-management/home.htm).
//

package adm

import (
	"fmt"
	"github.com/oracle/oci-go-sdk/v65/common"
	"strings"
)

// VulnerabilityAudit A Vulnerability Audit associates the Application Dependencies of a project with their associated vulnerabilities.
// Each Vulnerability is associated with a score (Common Vulnerability Scoring System V2 or V3).
type VulnerabilityAudit struct {

	// The Oracle Cloud identifier (OCID (https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Vulnerability Audit.
	Id *string `mandatory:"true" json:"id"`

	// The Oracle Cloud identifier (OCID (https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Knowledge Base.
	KnowledgeBaseId *string `mandatory:"true" json:"knowledgeBaseId"`

	// The creation date and time of the Vulnerability Audit (formatted according to RFC3339 (https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeCreated *common.SDKTime `mandatory:"true" json:"timeCreated"`

	// The update date and time of the Vulnerability Audit (formatted according to RFC3339 (https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeUpdated *common.SDKTime `mandatory:"true" json:"timeUpdated"`

	// The current lifecycle state of the Vulnerability Audit.
	LifecycleState VulnerabilityAuditLifecycleStateEnum `mandatory:"true" json:"lifecycleState"`

	// List of vulnerabilities found in the Vulnerability Audit.
	Vulnerabilities []Vulnerability `mandatory:"true" json:"vulnerabilities"`

	// Maximum Common Vulnerability Scoring System Version 2 score of vulnerabilities.
	MaxObservedCvssV2Score *float32 `mandatory:"true" json:"maxObservedCvssV2Score"`

	// Maximum Common Vulnerability Scoring System Version 3 score of vulnerabilities.
	MaxObservedCvssV3Score *float32 `mandatory:"true" json:"maxObservedCvssV3Score"`

	// Count of vulnerable artifacts.
	VulnerableArtifactsCount *int `mandatory:"true" json:"vulnerableArtifactsCount"`

	// The type of the build tool.
	BuildType VulnerabilityAuditBuildTypeEnum `mandatory:"true" json:"buildType"`

	// The Oracle Cloud identifier (OCID (https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the compartment associated with the Vulnerability Audit.
	CompartmentId *string `mandatory:"true" json:"compartmentId"`

	// The name of the Vulnerability Audit.
	DisplayName *string `mandatory:"false" json:"displayName"`

	Configuration *VulnerabilityAuditConfiguration `mandatory:"false" json:"configuration"`

	// Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
	IsSuccess *bool `mandatory:"false" json:"isSuccess"`

	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
	// Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `mandatory:"false" json:"freeformTags"`

	// Defined tags for this resource. Each key is predefined and scoped to a namespace.
	// Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]map[string]interface{} `mandatory:"false" json:"definedTags"`

	// Usage of system tag keys. These predefined keys are scoped to namespaces.
	// Example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags map[string]map[string]interface{} `mandatory:"false" json:"systemTags"`
}

func (m VulnerabilityAudit) String() string {
	return common.PointerString(m)
}

// ValidateEnumValue returns an error when providing an unsupported enum value
// This function is being called during constructing API request process
// Not recommended for calling this function directly
func (m VulnerabilityAudit) ValidateEnumValue() (bool, error) {
	errMessage := []string{}
	if _, ok := GetMappingVulnerabilityAuditLifecycleStateEnum(string(m.LifecycleState)); !ok && m.LifecycleState != "" {
		errMessage = append(errMessage, fmt.Sprintf("unsupported enum value for LifecycleState: %s. Supported values are: %s.", m.LifecycleState, strings.Join(GetVulnerabilityAuditLifecycleStateEnumStringValues(), ",")))
	}
	if _, ok := GetMappingVulnerabilityAuditBuildTypeEnum(string(m.BuildType)); !ok && m.BuildType != "" {
		errMessage = append(errMessage, fmt.Sprintf("unsupported enum value for BuildType: %s. Supported values are: %s.", m.BuildType, strings.Join(GetVulnerabilityAuditBuildTypeEnumStringValues(), ",")))
	}

	if len(errMessage) > 0 {
		return true, fmt.Errorf(strings.Join(errMessage, "\n"))
	}
	return false, nil
}

// VulnerabilityAuditLifecycleStateEnum Enum with underlying type: string
type VulnerabilityAuditLifecycleStateEnum string

// Set of constants representing the allowable values for VulnerabilityAuditLifecycleStateEnum
const (
	VulnerabilityAuditLifecycleStateActive   VulnerabilityAuditLifecycleStateEnum = "ACTIVE"
	VulnerabilityAuditLifecycleStateCreating VulnerabilityAuditLifecycleStateEnum = "CREATING"
	VulnerabilityAuditLifecycleStateDeleted  VulnerabilityAuditLifecycleStateEnum = "DELETED"
	VulnerabilityAuditLifecycleStateDeleting VulnerabilityAuditLifecycleStateEnum = "DELETING"
	VulnerabilityAuditLifecycleStateFailed   VulnerabilityAuditLifecycleStateEnum = "FAILED"
)

var mappingVulnerabilityAuditLifecycleStateEnum = map[string]VulnerabilityAuditLifecycleStateEnum{
	"ACTIVE":   VulnerabilityAuditLifecycleStateActive,
	"CREATING": VulnerabilityAuditLifecycleStateCreating,
	"DELETED":  VulnerabilityAuditLifecycleStateDeleted,
	"DELETING": VulnerabilityAuditLifecycleStateDeleting,
	"FAILED":   VulnerabilityAuditLifecycleStateFailed,
}

var mappingVulnerabilityAuditLifecycleStateEnumLowerCase = map[string]VulnerabilityAuditLifecycleStateEnum{
	"active":   VulnerabilityAuditLifecycleStateActive,
	"creating": VulnerabilityAuditLifecycleStateCreating,
	"deleted":  VulnerabilityAuditLifecycleStateDeleted,
	"deleting": VulnerabilityAuditLifecycleStateDeleting,
	"failed":   VulnerabilityAuditLifecycleStateFailed,
}

// GetVulnerabilityAuditLifecycleStateEnumValues Enumerates the set of values for VulnerabilityAuditLifecycleStateEnum
func GetVulnerabilityAuditLifecycleStateEnumValues() []VulnerabilityAuditLifecycleStateEnum {
	values := make([]VulnerabilityAuditLifecycleStateEnum, 0)
	for _, v := range mappingVulnerabilityAuditLifecycleStateEnum {
		values = append(values, v)
	}
	return values
}

// GetVulnerabilityAuditLifecycleStateEnumStringValues Enumerates the set of values in String for VulnerabilityAuditLifecycleStateEnum
func GetVulnerabilityAuditLifecycleStateEnumStringValues() []string {
	return []string{
		"ACTIVE",
		"CREATING",
		"DELETED",
		"DELETING",
		"FAILED",
	}
}

// GetMappingVulnerabilityAuditLifecycleStateEnum performs case Insensitive comparison on enum value and return the desired enum
func GetMappingVulnerabilityAuditLifecycleStateEnum(val string) (VulnerabilityAuditLifecycleStateEnum, bool) {
	enum, ok := mappingVulnerabilityAuditLifecycleStateEnumLowerCase[strings.ToLower(val)]
	return enum, ok
}

// VulnerabilityAuditBuildTypeEnum Enum with underlying type: string
type VulnerabilityAuditBuildTypeEnum string

// Set of constants representing the allowable values for VulnerabilityAuditBuildTypeEnum
const (
	VulnerabilityAuditBuildTypeMaven VulnerabilityAuditBuildTypeEnum = "MAVEN"
)

var mappingVulnerabilityAuditBuildTypeEnum = map[string]VulnerabilityAuditBuildTypeEnum{
	"MAVEN": VulnerabilityAuditBuildTypeMaven,
}

var mappingVulnerabilityAuditBuildTypeEnumLowerCase = map[string]VulnerabilityAuditBuildTypeEnum{
	"maven": VulnerabilityAuditBuildTypeMaven,
}

// GetVulnerabilityAuditBuildTypeEnumValues Enumerates the set of values for VulnerabilityAuditBuildTypeEnum
func GetVulnerabilityAuditBuildTypeEnumValues() []VulnerabilityAuditBuildTypeEnum {
	values := make([]VulnerabilityAuditBuildTypeEnum, 0)
	for _, v := range mappingVulnerabilityAuditBuildTypeEnum {
		values = append(values, v)
	}
	return values
}

// GetVulnerabilityAuditBuildTypeEnumStringValues Enumerates the set of values in String for VulnerabilityAuditBuildTypeEnum
func GetVulnerabilityAuditBuildTypeEnumStringValues() []string {
	return []string{
		"MAVEN",
	}
}

// GetMappingVulnerabilityAuditBuildTypeEnum performs case Insensitive comparison on enum value and return the desired enum
func GetMappingVulnerabilityAuditBuildTypeEnum(val string) (VulnerabilityAuditBuildTypeEnum, bool) {
	enum, ok := mappingVulnerabilityAuditBuildTypeEnumLowerCase[strings.ToLower(val)]
	return enum, ok
}
