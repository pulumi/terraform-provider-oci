// Copyright (c) 2017, 2021, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package integrationtest

import (
	"context"
	"fmt"
	"strconv"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
	oci_adm "github.com/oracle/oci-go-sdk/v65/adm"
	"github.com/oracle/oci-go-sdk/v65/common"

	"terraform-provider-oci/httpreplay"
	"terraform-provider-oci/internal/acctest"
	tf_client "terraform-provider-oci/internal/client"
	"terraform-provider-oci/internal/resourcediscovery"
	"terraform-provider-oci/internal/tfresource"
	"terraform-provider-oci/internal/utils"
)

var (
	ignoreVulnerabilityAuditDefinedTagsChangesRepresentation = map[string]interface{}{
		"ignore_changes": acctest.Representation{RepType: acctest.Required, Create: []string{`defined_tags`}},
	}

	AdmVulnerabilityAuditRequiredOnlyResource = AdmVulnerabilityAuditResourceDependencies +
		acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Required, acctest.Create, vulnerabilityAuditRepresentation)

	AdmVulnerabilityAuditResourceConfig = AdmVulnerabilityAuditResourceDependencies +
		acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Optional, acctest.Update, vulnerabilityAuditRepresentation)

	AdmvulnerabilityAuditSingularDataSourceRepresentation = map[string]interface{}{
		"vulnerability_audit_id": acctest.Representation{RepType: acctest.Required, Create: `${oci_adm_vulnerability_audit.test_vulnerability_audit.id}`},
	}

	AdmvulnerabilityAuditDataSourceRepresentation = map[string]interface{}{
		"compartment_id":    acctest.Representation{RepType: acctest.Optional, Create: `${var.compartment_id}`},
		"display_name":      acctest.Representation{RepType: acctest.Optional, Create: `displayName`, Update: `displayName2`},
		"id":                acctest.Representation{RepType: acctest.Optional, Create: `${oci_adm_vulnerability_audit.test_vulnerability_audit.id}`},
		"is_success":        acctest.Representation{RepType: acctest.Optional, Create: `false`},
		"knowledge_base_id": acctest.Representation{RepType: acctest.Optional, Create: `${oci_adm_knowledge_base.test_knowledge_base.id}`},
		"state":             acctest.Representation{RepType: acctest.Optional, Create: `ACTIVE`},
		"filter":            acctest.RepresentationGroup{RepType: acctest.Required, Group: vulnerabilityAuditDataSourceFilterRepresentation}}
	vulnerabilityAuditDataSourceFilterRepresentation = map[string]interface{}{
		"name":   acctest.Representation{RepType: acctest.Required, Create: `id`},
		"values": acctest.Representation{RepType: acctest.Required, Create: []string{`${oci_adm_vulnerability_audit.test_vulnerability_audit.id}`}},
	}

	vulnerabilityAuditRepresentation = map[string]interface{}{
		"application_dependencies": acctest.RepresentationGroup{RepType: acctest.Required, Group: vulnerabilityAuditApplicationDependenciesRepresentation},
		"build_type":               acctest.Representation{RepType: acctest.Required, Create: `MAVEN`},
		"compartment_id":           acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id}`},
		"knowledge_base_id":        acctest.Representation{RepType: acctest.Required, Create: `${oci_adm_knowledge_base.test_knowledge_base.id}`},
		"configuration":            acctest.RepresentationGroup{RepType: acctest.Optional, Group: vulnerabilityAuditConfigurationRepresentation},
		"defined_tags":             acctest.Representation{RepType: acctest.Optional, Create: `${map("${oci_identity_tag_namespace.tag-namespace1.name}.${oci_identity_tag.tag1.name}", "value")}`, Update: `${map("${oci_identity_tag_namespace.tag-namespace1.name}.${oci_identity_tag.tag1.name}", "updatedValue")}`},
		"display_name":             acctest.Representation{RepType: acctest.Optional, Create: `displayName`, Update: `displayName2`},
		"freeform_tags":            acctest.Representation{RepType: acctest.Optional, Create: map[string]string{"bar-key": "value"}, Update: map[string]string{"Department": "Accounting"}},
		"lifecycle":                acctest.RepresentationGroup{RepType: acctest.Required, Group: ignoreVulnerabilityAuditDefinedTagsChangesRepresentation},
	}
	vulnerabilityAuditApplicationDependenciesRepresentation = map[string]interface{}{
		"application_dependency_node_ids": acctest.Representation{RepType: acctest.Required, Create: []string{`node_id`}},
		"gav":                             acctest.Representation{RepType: acctest.Required, Create: `gav`},
		"node_id":                         acctest.Representation{RepType: acctest.Required, Create: `node_id`},
	}
	vulnerabilityAuditConfigurationRepresentation = map[string]interface{}{
		"exclusions":                   acctest.Representation{RepType: acctest.Optional, Create: []string{`exclusions`}},
		"max_permissible_cvss_v2score": acctest.Representation{RepType: acctest.Optional, Create: `1.5`},
		"max_permissible_cvss_v3score": acctest.Representation{RepType: acctest.Optional, Create: `1.5`},
	}

	AdmVulnerabilityAuditResourceDependencies = acctest.GenerateResourceFromRepresentationMap("oci_adm_knowledge_base", "test_knowledge_base", acctest.Required, acctest.Create, knowledgeBaseRepresentation) +
		DefinedTagsDependencies
)

// issue-routing-tag: adm/default
func TestAdmVulnerabilityAuditResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmVulnerabilityAuditResource_basic")
	defer httpreplay.SaveScenario()

	config := acctest.ProviderTestConfig()

	compartmentId := utils.GetEnvSettingWithBlankDefault("compartment_ocid")
	compartmentIdVariableStr := fmt.Sprintf("variable \"compartment_id\" { default = \"%s\" }\n", compartmentId)

	compartmentIdU := utils.GetEnvSettingWithDefault("compartment_id_for_update", compartmentId)
	compartmentIdUVariableStr := fmt.Sprintf("variable \"compartment_id_for_update\" { default = \"%s\" }\n", compartmentIdU)

	resourceName := "oci_adm_vulnerability_audit.test_vulnerability_audit"
	datasourceName := "data.oci_adm_vulnerability_audits.test_vulnerability_audits"
	singularDatasourceName := "data.oci_adm_vulnerability_audit.test_vulnerability_audit"

	var resId, resId2 string
	// Save TF content to Create resource with optional properties. This has to be exactly the same as the config part in the "create with optionals" step in the test.
	acctest.SaveConfigContent(config+compartmentIdVariableStr+AdmVulnerabilityAuditResourceDependencies+
		acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Optional, acctest.Create, vulnerabilityAuditRepresentation), "adm", "vulnerabilityAudit", t)

	acctest.ResourceTest(t, testAccCheckAdmVulnerabilityAuditDestroy, []resource.TestStep{
		// verify Create
		{
			Config: config + compartmentIdVariableStr + AdmVulnerabilityAuditResourceDependencies +
				acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Required, acctest.Create, vulnerabilityAuditRepresentation),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.application_dependency_node_ids.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.gav", "gav"),
				resource.TestCheckResourceAttrSet(resourceName, "application_dependencies.0.node_id"),
				resource.TestCheckResourceAttr(resourceName, "build_type", "MAVEN"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttrSet(resourceName, "knowledge_base_id"),

				func(s *terraform.State) (err error) {
					resId, err = acctest.FromInstanceState(s, resourceName, "id")
					return err
				},
			),
		},

		// delete before next Create
		{
			Config: config + compartmentIdVariableStr + AdmVulnerabilityAuditResourceDependencies,
		},
		// verify Create with optionals
		{
			Config: config + compartmentIdVariableStr + AdmVulnerabilityAuditResourceDependencies +
				acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Optional, acctest.Create, vulnerabilityAuditRepresentation),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.application_dependency_node_ids.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.gav", "gav"),
				resource.TestCheckResourceAttrSet(resourceName, "application_dependencies.0.node_id"),
				resource.TestCheckResourceAttr(resourceName, "build_type", "MAVEN"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.exclusions.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.max_permissible_cvss_v2score", "1.5"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.max_permissible_cvss_v3score", "1.5"),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttrSet(resourceName, "knowledge_base_id"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),
				resource.TestCheckResourceAttrSet(resourceName, "vulnerabilities.#"),
				resource.TestCheckResourceAttrSet(resourceName, "vulnerable_artifacts_count"),

				func(s *terraform.State) (err error) {
					resId, err = acctest.FromInstanceState(s, resourceName, "id")
					if isEnableExportCompartment, _ := strconv.ParseBool(utils.GetEnvSettingWithDefault("enable_export_compartment", "false")); isEnableExportCompartment {
						if errExport := resourcediscovery.TestExportCompartmentWithResourceName(&resId, &compartmentId, resourceName); errExport != nil {
							return errExport
						}
					}
					return err
				},
			),
		},

		// verify Update to the compartment (the compartment will be switched back in the next step)
		{
			Config: config + compartmentIdVariableStr + compartmentIdUVariableStr + AdmVulnerabilityAuditResourceDependencies +
				acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Optional, acctest.Create,
					acctest.RepresentationCopyWithNewProperties(vulnerabilityAuditRepresentation, map[string]interface{}{
						"compartment_id": acctest.Representation{RepType: acctest.Required, Create: `${var.compartment_id_for_update}`},
					})),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.application_dependency_node_ids.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.gav", "gav"),
				resource.TestCheckResourceAttrSet(resourceName, "application_dependencies.0.node_id"),
				resource.TestCheckResourceAttr(resourceName, "build_type", "MAVEN"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentIdU),
				resource.TestCheckResourceAttr(resourceName, "configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.exclusions.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.max_permissible_cvss_v2score", "1.5"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.max_permissible_cvss_v3score", "1.5"),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttrSet(resourceName, "knowledge_base_id"),
				resource.TestCheckResourceAttrSet(resourceName, "state"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),
				resource.TestCheckResourceAttrSet(resourceName, "vulnerabilities.#"),
				resource.TestCheckResourceAttrSet(resourceName, "vulnerable_artifacts_count"),

				func(s *terraform.State) (err error) {
					resId2, err = acctest.FromInstanceState(s, resourceName, "id")
					if resId != resId2 {
						return fmt.Errorf("resource recreated when it was supposed to be updated")
					}
					return err
				},
			),
		},

		// verify updates to updatable parameters
		{
			Config: config + compartmentIdVariableStr + AdmVulnerabilityAuditResourceDependencies +
				acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Optional, acctest.Update, vulnerabilityAuditRepresentation),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.application_dependency_node_ids.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "application_dependencies.0.gav", "gav"),
				resource.TestCheckResourceAttrSet(resourceName, "application_dependencies.0.node_id"),
				resource.TestCheckResourceAttr(resourceName, "build_type", "MAVEN"),
				resource.TestCheckResourceAttr(resourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(resourceName, "configuration.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.exclusions.#", "1"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.max_permissible_cvss_v2score", "1.5"),
				resource.TestCheckResourceAttr(resourceName, "configuration.0.max_permissible_cvss_v3score", "1.5"),
				resource.TestCheckResourceAttr(resourceName, "display_name", "displayName2"),
				resource.TestCheckResourceAttr(resourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(resourceName, "id"),
				resource.TestCheckResourceAttrSet(resourceName, "knowledge_base_id"),
				resource.TestCheckResourceAttrSet(resourceName, "time_created"),
				resource.TestCheckResourceAttrSet(resourceName, "time_updated"),
				resource.TestCheckResourceAttrSet(resourceName, "vulnerabilities.#"),
				resource.TestCheckResourceAttrSet(resourceName, "vulnerable_artifacts_count"),

				func(s *terraform.State) (err error) {
					resId2, err = acctest.FromInstanceState(s, resourceName, "id")
					if resId != resId2 {
						return fmt.Errorf("Resource recreated when it was supposed to be updated.")
					}
					return err
				},
			),
		},
		// verify datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_adm_vulnerability_audits", "test_vulnerability_audits", acctest.Optional, acctest.Update, AdmvulnerabilityAuditDataSourceRepresentation) +
				compartmentIdVariableStr + AdmVulnerabilityAuditResourceDependencies +
				acctest.GenerateResourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Optional, acctest.Update, vulnerabilityAuditRepresentation),
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttr(datasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(datasourceName, "display_name", "displayName2"),
				resource.TestCheckResourceAttrSet(datasourceName, "id"),
				resource.TestCheckResourceAttr(datasourceName, "is_success", "false"),
				resource.TestCheckResourceAttrSet(datasourceName, "knowledge_base_id"),
				resource.TestCheckResourceAttr(datasourceName, "state", "ACTIVE"),

				resource.TestCheckResourceAttr(datasourceName, "vulnerability_audit_collection.#", "1"),
				resource.TestCheckResourceAttr(datasourceName, "vulnerability_audit_collection.0.items.#", "1"),
			),
		},
		// verify singular datasource
		{
			Config: config +
				acctest.GenerateDataSourceFromRepresentationMap("oci_adm_vulnerability_audit", "test_vulnerability_audit", acctest.Required, acctest.Create, AdmvulnerabilityAuditSingularDataSourceRepresentation) +
				compartmentIdVariableStr + AdmVulnerabilityAuditResourceConfig,
			Check: acctest.ComposeAggregateTestCheckFuncWrapper(
				resource.TestCheckResourceAttrSet(singularDatasourceName, "vulnerability_audit_id"),

				resource.TestCheckResourceAttr(singularDatasourceName, "build_type", "MAVEN"),
				resource.TestCheckResourceAttr(singularDatasourceName, "compartment_id", compartmentId),
				resource.TestCheckResourceAttr(singularDatasourceName, "configuration.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "configuration.0.exclusions.#", "1"),
				resource.TestCheckResourceAttr(singularDatasourceName, "configuration.0.max_permissible_cvss_v2score", "1.5"),
				resource.TestCheckResourceAttr(singularDatasourceName, "configuration.0.max_permissible_cvss_v3score", "1.5"),
				resource.TestCheckResourceAttr(singularDatasourceName, "display_name", "displayName2"),
				resource.TestCheckResourceAttr(singularDatasourceName, "freeform_tags.%", "1"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "id"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "is_success"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "state"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_created"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "time_updated"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "vulnerabilities.#"),
				resource.TestCheckResourceAttrSet(singularDatasourceName, "vulnerable_artifacts_count"),
			),
		},
		// verify resource import
		{
			Config:            config + AdmVulnerabilityAuditRequiredOnlyResource,
			ImportState:       true,
			ImportStateVerify: true,
			ImportStateVerifyIgnore: []string{
				"application_dependencies",
			},
			ResourceName: resourceName,
		},
	})
}

func testAccCheckAdmVulnerabilityAuditDestroy(s *terraform.State) error {
	noResourceFound := true
	client := acctest.TestAccProvider.Meta().(*tf_client.OracleClients).ApplicationDependencyManagementClient()
	for _, rs := range s.RootModule().Resources {
		if rs.Type == "oci_adm_vulnerability_audit" {
			noResourceFound = false
			request := oci_adm.GetVulnerabilityAuditRequest{}

			tmp := rs.Primary.ID
			request.VulnerabilityAuditId = &tmp

			request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(true, "adm")

			response, err := client.GetVulnerabilityAudit(context.Background(), request)

			if err == nil {
				deletedLifecycleStates := map[string]bool{
					string(oci_adm.VulnerabilityAuditLifecycleStateDeleted): true,
				}
				if _, ok := deletedLifecycleStates[string(response.LifecycleState)]; !ok {
					//resource lifecycle state is not in expected deleted lifecycle states.
					return fmt.Errorf("resource lifecycle state: %s is not in expected deleted lifecycle states", response.LifecycleState)
				}
				//resource lifecycle state is in expected deleted lifecycle states. continue with next one.
				continue
			}

			//Verify that exception is for '404 not found'.
			if failure, isServiceError := common.IsServiceError(err); !isServiceError || failure.GetHTTPStatusCode() != 404 {
				return err
			}
		}
	}
	if noResourceFound {
		return fmt.Errorf("at least one resource was expected from the state file, but could not be found")
	}

	return nil
}

func init() {
	if acctest.DependencyGraph == nil {
		acctest.InitDependencyGraph()
	}
	if !acctest.InSweeperExcludeList("AdmVulnerabilityAudit") {
		resource.AddTestSweepers("AdmVulnerabilityAudit", &resource.Sweeper{
			Name:         "AdmVulnerabilityAudit",
			Dependencies: acctest.DependencyGraph["vulnerabilityAudit"],
			F:            sweepAdmVulnerabilityAuditResource,
		})
	}
}

func sweepAdmVulnerabilityAuditResource(compartment string) error {
	applicationDependencyManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ApplicationDependencyManagementClient()
	vulnerabilityAuditIds, err := getAdmVulnerabilityAuditIds(compartment)
	if err != nil {
		return err
	}
	for _, vulnerabilityAuditId := range vulnerabilityAuditIds {
		if ok := acctest.SweeperDefaultResourceId[vulnerabilityAuditId]; !ok {
			deleteVulnerabilityAuditRequest := oci_adm.DeleteVulnerabilityAuditRequest{}

			deleteVulnerabilityAuditRequest.VulnerabilityAuditId = &vulnerabilityAuditId

			deleteVulnerabilityAuditRequest.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(true, "adm")
			_, error := applicationDependencyManagementClient.DeleteVulnerabilityAudit(context.Background(), deleteVulnerabilityAuditRequest)
			if error != nil {
				fmt.Printf("Error deleting VulnerabilityAudit %s %s, It is possible that the resource is already deleted. Please verify manually \n", vulnerabilityAuditId, error)
				continue
			}
			acctest.WaitTillCondition(acctest.TestAccProvider, &vulnerabilityAuditId, AdmvulnerabilityAuditsSweepWaitCondition, time.Duration(3*time.Minute),
				AdmvulnerabilityAuditsSweepResponseFetchOperation, "adm", true)
		}
	}
	return nil
}

func getAdmVulnerabilityAuditIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "VulnerabilityAuditId")
	if ids != nil {
		return ids, nil
	}
	var resourceIds []string
	compartmentId := compartment
	applicationDependencyManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ApplicationDependencyManagementClient()

	listVulnerabilityAuditsRequest := oci_adm.ListVulnerabilityAuditsRequest{}
	listVulnerabilityAuditsRequest.CompartmentId = &compartmentId
	listVulnerabilityAuditsRequest.LifecycleState = oci_adm.VulnerabilityAuditLifecycleStateActive
	listVulnerabilityAuditsResponse, err := applicationDependencyManagementClient.ListVulnerabilityAudits(context.Background(), listVulnerabilityAuditsRequest)

	if err != nil {
		return resourceIds, fmt.Errorf("Error getting VulnerabilityAudit list for compartment id : %s , %s \n", compartmentId, err)
	}
	for _, vulnerabilityAudit := range listVulnerabilityAuditsResponse.Items {
		id := *vulnerabilityAudit.Id
		resourceIds = append(resourceIds, id)
		acctest.AddResourceIdToSweeperResourceIdMap(compartmentId, "VulnerabilityAuditId", id)
	}
	return resourceIds, nil
}

func AdmvulnerabilityAuditsSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
	if vulnerabilityAuditResponse, ok := response.Response.(oci_adm.GetVulnerabilityAuditResponse); ok {
		return vulnerabilityAuditResponse.LifecycleState != oci_adm.VulnerabilityAuditLifecycleStateDeleted
	}
	return false
}

func AdmvulnerabilityAuditsSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.ApplicationDependencyManagementClient().GetVulnerabilityAudit(context.Background(), oci_adm.GetVulnerabilityAuditRequest{
		VulnerabilityAuditId: resourceId,
		RequestMetadata: common.RequestMetadata{
			RetryPolicy: retryPolicy,
		},
	})
	return err
}
