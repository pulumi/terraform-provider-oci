// Copyright (c) 2017, 2021, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package adm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	oci_adm "github.com/oracle/oci-go-sdk/v65/adm"

	"terraform-provider-oci/internal/client"
	"terraform-provider-oci/internal/tfresource"
)

func AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSource() *schema.Resource {
	return &schema.Resource{
		Read: readAdmVulnerabilityAuditApplicationDependencyVulnerabilities,
		Schema: map[string]*schema.Schema{
			"filter": tfresource.DataSourceFiltersSchema(),
			"cvss_v2greater_than_or_equal": {
				Type:     schema.TypeFloat,
				Optional: true,
			},
			"cvss_v3greater_than_or_equal": {
				Type:     schema.TypeFloat,
				Optional: true,
			},
			"gav": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"vulnerability_audit_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"vulnerability_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"application_dependency_vulnerability_collection": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"items": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required

									// Optional

									// Computed
									"items": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional

												// Computed
												"application_dependency_node_ids": {
													Type:     schema.TypeList,
													Computed: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
												"gav": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"is_found_in_knowledge_base": {
													Type:     schema.TypeBool,
													Computed: true,
												},
												"node_id": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"vulnerabilities": {
													Type:     schema.TypeList,
													Computed: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															// Required

															// Optional

															// Computed
															"cvss_v2score": {
																Type:     schema.TypeFloat,
																Computed: true,
															},
															"cvss_v3score": {
																Type:     schema.TypeFloat,
																Computed: true,
															},
															"id": {
																Type:     schema.TypeString,
																Computed: true,
															},
															"is_ignored": {
																Type:     schema.TypeBool,
																Computed: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func readAdmVulnerabilityAuditApplicationDependencyVulnerabilities(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).ApplicationDependencyManagementClient()

	return tfresource.ReadResource(sync)
}

type AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud struct {
	D      *schema.ResourceData
	Client *oci_adm.ApplicationDependencyManagementClient
	Res    *oci_adm.ListApplicationDependencyVulnerabilitiesResponse
}

func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
}

func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud) Get() error {
	request := oci_adm.ListApplicationDependencyVulnerabilitiesRequest{}

	if cvssV2GreaterThanOrEqual, ok := s.D.GetOkExists("cvss_v2greater_than_or_equal"); ok {
		tmp := cvssV2GreaterThanOrEqual.(float32)
		request.CvssV2GreaterThanOrEqual = &tmp
	}

	if cvssV3GreaterThanOrEqual, ok := s.D.GetOkExists("cvss_v3greater_than_or_equal"); ok {
		tmp := cvssV3GreaterThanOrEqual.(float32)
		request.CvssV3GreaterThanOrEqual = &tmp
	}

	if gav, ok := s.D.GetOkExists("gav"); ok {
		tmp := gav.(string)
		request.Gav = &tmp
	}

	if vulnerabilityAuditId, ok := s.D.GetOkExists("vulnerability_audit_id"); ok {
		tmp := vulnerabilityAuditId.(string)
		request.VulnerabilityAuditId = &tmp
	}

	if vulnerabilityId, ok := s.D.GetOkExists("vulnerability_id"); ok {
		tmp := vulnerabilityId.(string)
		request.VulnerabilityId = &tmp
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(false, "adm")

	response, err := s.Client.ListApplicationDependencyVulnerabilities(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response
	request.Page = s.Res.OpcNextPage

	for request.Page != nil {
		listResponse, err := s.Client.ListApplicationDependencyVulnerabilities(context.Background(), request)
		if err != nil {
			return err
		}

		s.Res.Items = append(s.Res.Items, listResponse.Items...)
		request.Page = listResponse.OpcNextPage
	}

	return nil
}

func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud) SetData() error {
	if s.Res == nil {
		return nil
	}

	s.D.SetId(tfresource.GenerateDataSourceHashID("AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSource-", AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSource(), s.D))
	resources := []map[string]interface{}{}
	vulnerabilityAuditApplicationDependencyVulnerability := map[string]interface{}{}

	items := []interface{}{}
	for _, item := range s.Res.Items {
		items = append(items, ApplicationDependencyVulnerabilitySummaryToMap(item))
	}
	vulnerabilityAuditApplicationDependencyVulnerability["items"] = items

	if f, fOk := s.D.GetOkExists("filter"); fOk {
		items = tfresource.ApplyFiltersInCollection(f.(*schema.Set), items, AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSource().Schema["application_dependency_vulnerability_collection"].Elem.(*schema.Resource).Schema)
		vulnerabilityAuditApplicationDependencyVulnerability["items"] = items
	}

	resources = append(resources, vulnerabilityAuditApplicationDependencyVulnerability)
	if err := s.D.Set("application_dependency_vulnerability_collection", resources); err != nil {
		return err
	}

	return nil
}
